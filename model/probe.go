package model

const DefaultReceiverTpl = `[alertmanager]({{ .NotifierURL }}) -- **{{ .Name }}**: {{ .Annotations.summary }}
Alert generated by {{ .GeneratorURL }}
**Details**: {{ .Annotations.description }}`

type Probe struct {
	// A unique identifier for this receiver.
	Name     string `yaml:"name" json:"name"`
	DocUrl   string `yaml:"doc_url" json:"doc_url"`
	Template string `yaml:"template,omitempty" json:"-"`
	// Catches all undefined fields and must be empty after parsing.
	XXX map[string]interface{} `yaml:",inline" json:"-"`
}

func (c *Probe) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type plain Probe
	if err := unmarshal((*plain)(c)); err != nil {
		return err
	}
	if c.Template == "" {
		c.Template = DefaultReceiverTpl
	}
	return checkOverflow(c.XXX, "receiver config")
}

type Probes []*Probe

func (r Probes) Len() int {
	return len(r)
}
func (r Probes) Swap(i, j int) {
	r[i], r[j] = r[j], r[i]
}
func (r Probes) Less(i, j int) bool {
	return r[i].Name < r[j].Name
}

func (r Probes) FindProbeByAlert(alert Alert, route *Route) *Probe {
	finalRoute := route.FindRoute(alert)
	if finalRoute == nil {
		return nil
	}
	recName := finalRoute.Probe
	for _, rec := range r {
		if rec.Name == recName {
			return rec
		}
	}
	return nil
}
func (r Probes) FindProbe(probeName string) *Probe {
	for _, probe := range r {
		if probe.Name == probeName {
			return probe
		}
	}
	return nil
}
